apiVersion: x.symphony.k8s.aws/v1alpha1
kind: ResourceGroup
metadata:
  name: vpcsubnets.x.symphony.k8s.aws
spec:
  apiVersion: v1alpha1
  kind: VPCSubnets
  definition: # The abstraction definition of an IRSA CRD. The spec fields will be provided by end users.
    spec:
      numberSubnets: int
      vpc:
        cidrBlock: string
        name: string
        enableDNSSupport: bool
        enableDnsHostnames: bool
        amazonProvidedIpv6CIDRBlock: bool
        instanceTenancy: string
        ipv6CIDRBlock: string
        ipv6Pool: string
      subnet:
        publicSubnet1: ${subnetParams}
        publicSubnet2: ${subnetParams}
        publicSubnet3: ${subnetParams}
        privateSubnet1: ${subnetParams}
        privateSubnet2: ${subnetParams}
        privateSubnet3: ${subnetParams}
      deletionPolicy: string
      region: string
    status:
      vpcID: ${vpc.status.ACKResourceMetadata.ARN}
      vpcCIDRBlock: ${vpc.spec.cidrBlock}
      subnetIDs:
      - ${publicSubnet1.status.ACKResourceMetadata.ARN}
      - ${publicSubnet2.status.ACKResourceMetadata.ARN}
      - ${publicSubnet3.status.ACKResourceMetadata.ARN}
      - ${privateSubnet1.status.ACKResourceMetadata.ARN}
      - ${privateSubnet2.status.ACKResourceMetadata.ARN}
      - ${privateSubnet3.status.ACKResourceMetadata.ARN}
    customTypes:
    - subnetParams:
        cidrBlock: string
        ipv6CIDRBlock: string
        availabilityZone: string
      required:
      - cidrBlock
    required:
      - vpc
      - subnet
    validation:
    - 
  celOptions:
    define: # We can also define some other customer variables
      ackAnnotations:
        services.k8s.aws/region: ${spec.region}
        services.k8s.aws/deletion-policy: ${spec.deletionPolicy}
    nameGenerationPolicy: IfNotExist
  resources:
    - name: vpc
      createOn: ${spec.vpcType == "aws"}
      type: conditional
      definition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: VPC
        metadata:
          annotations: ${ackAnnotations}
        spec:
          cidrBlock: ${spec.vpc.cidrBlock}
          enableDNSSupport: ${spec.vpc.enableDNSSupport}
          enableDnsHostnames: ${spec.vpc.enableDNSSupport}
          amazonProvidedIpv6CIDRBlock: ${spec.vpc.amazonProvidedIpv6CIDRBlock}
          instanceTenancy: ${spec.vpc.instanceTenancy}
          ipv6CIDRBlock: ${spec.vpc.ipv6CIDRBlock}
          ipv6Pool: ${spec.vpc.ipv6Pool}
          tags:
          - key: Name
            value: ${spec.vpc.name}

    - name: adminAccounts
      repeat: 3
      templateDefinition:
        - username: user-${i}
      
    - name: backups
      repeat: ${spec.numBackups}
      templateDefinition:
        - backname: backup-${i}
          subnet: ${subnet.status.ID}




    - name: subnetCollection
      range: range(start=1, stop=10, step=2)
      indexVariable: i # Symphony will create a variable called i that will be incremented for each iteration.
      generatedName: publicSubnet${i} # The generated name for each public subnet.
      templateDefinition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: Subnet
        metadata:
          labels:
            zone: ${spec.subnet.publicSubnet${i}.availabilityZone}
          annotations: ${ackAnnotations}
          name: public-subnet-${i} # The name of each public subnet.
        spec:
          availabilityZone: ${spec.subnet.publicSubnet${i}.availabilityZone}







    - name: subnetCollection
      repeat: ${spec.numberSubnets}
      indexVariable: i
      generatedName: privateSubnet${i}
      templateDefinition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: Subnet
        metadata:
          labels:
            zone: ${spec.subnet.privateSubnet${i}.availabilityZone}
          name: private-subnet-${i}
        spec:
          availabilityZone: ${spec.subnet.privateSubnet${i}.availabilityZone}

















    - name: internetGateway
      definition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: InternetGateway
        metadata:
          annotations: ${subnetCollections}
        spec:
          vpcID: ${vpc.status.ACKResourceMetadata.ARN}
          tags:
            - key: Name
              value: igw-${spec.vpc.name}
    - name: singleNatgateway
      definition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: NatGateway
        metadata:
          annotations: ${ackAnnotations}
        spec:
          connectivityType: ${spec.connectivityType}
          subnetID: ${publicSubnet1.status.ACKResourceMetadata.ARN}
          allocationID: ${elasticIp.status.ACKResourceMetadata.ARN}
          tags:
            - key: Name
              value: nat-gw-${spec.vpc.name}
    - name: elasticIp
      definition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: ElasticIPAddress
        metadata:
          annotations: ${ackAnnotations}
        spec:
          domain: ${spec.domain}
          tags:
            - key: Name
              value: eip-${spec.vpc.name}
    - name: publicRouteTable
      definition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: RouteTable
        metadata:
          annotations: ${ackAnnotations}
        spec:
          vpcID: ${vpc.status.ACKResourceMetadata.ARN}
          routes:
          - destinationCIDRBlock: 0.0.0.0/0
            natGatewayID: ${singleNatgateway.status.ACKResourceMetadata.ARN}
          tags:
            - key: Name
              value: public-route-table-${spec.vpc.name}
    - name: privateRouteTable
      definition:
        apiVersion: ec2.services.k8s.aws/v1alpha1
        kind: RouteTable
        metadata:
          annotations: ${ackAnnotations}
        spec:
          vpcID: ${vpc.status.ACKResourceMetadata.ARN}
          routes:
          - destinationCIDRBlock: 0.0.0.0/0
            natGatewayID: ${singleNatgateway.status.ACKResourceMetadata.ARN}¸¸